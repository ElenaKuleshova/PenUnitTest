import com.sun.jdi.BooleanValue;
import org.testng.Assert;
import org.testng.annotations.Test;

import static org.testng.Assert.assertEquals;


public class PenTests {

    @Test(dataProvider = "getPenObjects", dataProviderClass = StaticProvider.class)
    public void testConstructors(Pen pen) {
        Assert.assertNotEquals(pen, null);
    }

    @Test(dataProvider = "providePenObjectWithColor", dataProviderClass = StaticProvider.class)
    public void testGetColor(int inkContainerValue, double sizeLetter, String color) {
        Pen pen = new Pen(inkContainerValue, sizeLetter, color);
        Assert.assertEquals(pen.getColor(), color);
    }

    @Test(dataProvider = "provideInkContainerValue", dataProviderClass = StaticProvider.class)
    public void testIsWork(int inkContainerValue) {
        Pen pen = new Pen(inkContainerValue);
        Assert.assertEquals(pen.isWork().booleanValue(), inkContainerValue > 0);
    }

   @Test (dataProvider = "provideWriteTestWithPositiveData", dataProviderClass = StaticProvider.class)
    public void checkWriteReturnsEmptyString (Pen pen, String word){
        String actual = pen.write(word);
        Assert.assertEquals(actual, "");
   }

   @Test (dataProvider = "provideWriteTestWithPositiveData", dataProviderClass = StaticProvider.class)
    public void checkWriteReturnsWord(Pen pen, String word){
        String actual = pen.write(word);
        Assert.assertEquals(actual, word);
    }

    @Test (dataProvider = "provideWriteTestWithPositiveData", dataProviderClass = StaticProvider.class)
    public void checkWriteReturnsPartOfWord(Pen pen, String word, String expected){
        String actual = pen.write(word);
        Assert.assertEquals(actual, expected);
    }

    @Test(groups = {"negative"}, dataProvider = "provideWriteTestWithNegativeData", dataProviderClass = StaticProvider.class)
    public void testWriteNegative(Pen pen, String word, String expected) {
        String actual = pen.write(word);
        Assert.assertEquals(actual, expected);
    }

}





