import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.testng.Assert.assertEquals;


public class WriteAndIsWorkTest { //rename--> to PenTests

    @Test(dataProvider = "getPenObjects", dataProviderClass = StaticProvider.class)
    public void testConstructors(Pen pen) {
        Assert.assertNotEquals(pen, null);
    }

    @Test(dataProvider = "getWriteDataConstructor1", dataProviderClass = StaticProvider.class)
    public void testWriteWith1Param(int inkContainerValue, String enteredWord, String expected) {
        Pen pen = new Pen(inkContainerValue);
        String actual = pen.write(enteredWord);
        Assert.assertEquals(actual, expected);
    }

    @Test(dataProvider = "getWriteDataConstructor2", dataProviderClass = StaticProvider.class)
    public void testWriteWith2Params(int inkContainerValue, double sizeLetter, String enteredWord, String expected) {
        Pen pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(enteredWord);
        Assert.assertEquals(actual, expected);
    }

    @Test(dataProvider = "AllConstructorTypesWithPositiveInkContainer", dataProviderClass = StaticProvider.class)
    public void testIsWorkMethodTrue(Pen pen) {
        Assert.assertTrue(pen.isWork());

    }

    @Test(dataProvider = "AllConstructorTypesWithNegativeOrZeroInkContainer", dataProviderClass = StaticProvider.class)
    public void testIsWorkMethodFalse(Pen pen) {
        Assert.assertFalse(pen.isWork());
    }

   /* private ByteArrayOutputStream consoleContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @BeforeMethod
    public void setUpStream() {
        System.setOut(new PrintStream(this.consoleContent));
    }

    @Test (dataProvider = "getPenObjectWithInkContainer", dataProviderClass = StaticProvider.class)
    public void testDoSomethingElse (Pen pen) {
        pen.doSomethingElse();
        assertEquals(consoleContent.toString().trim(), "BLUE");
    }
    @AfterMethod
    public void restoreStream() {
        System.setOut(this.originalOut);
        this.consoleContent = new ByteArrayOutputStream();
    }*/
}


